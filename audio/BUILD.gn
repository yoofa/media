import("//base/build/ave.gni")

ave_library("audio") {
  deps = [
    ":audio_base",
    ":audio_device",
  ]
}

# audio base
ave_source_set("audio_base") {
  sources = [ "audio.h" ]
  deps = [
    ":audio_channel_layout",
    ":audio_format",
  ]
}

ave_library("audio_format") {
  sources = [ "audio_format.h" ]
}

ave_library("audio_channel_layout") {
  sources = [
    "channel_layout.cc",
    "channel_layout.h",
  ]
}

# audio device base
ave_library("audio_device_base") {
  sources = [
    "audio_device.h",
    "audio_loopback.h",
    "audio_record.h",
    "audio_track.h",
  ]
  deps = [ ":audio_base" ]
}

# audio device
ave_library("audio_device") {
  sources = [ "audio_device.cc" ]
  deps = [
    ":alsa_audio_device",
    ":audio_base",
    ":audio_device_base",
  ]
}

# linux
ave_library("linux_symbol_binding") {
  sources = [
    "linux/latebinding_symbol_table.cc",
    "linux/latebinding_symbol_table.h",
  ]
}
ave_library("linux_alsa_symbol") {
  sources = [
    "linux/alsa_symbol_table.cc",
    "linux/alsa_symbol_table.h",
  ]
  deps = [ ":linux_symbol_binding" ]
}
ave_library("pulseaudio_symbol") {
  sources = [
    "pulseaudio/pulseaudio_symbol_table.cc",
    "pulseaudio/pulseaudio_symbol_table.h",
  ]
  deps = [ ":linux_symbol_binding" ]
}

# linux alsa device
ave_library("alsa_audio_device") {
  sources = [
    "linux/alsa_audio_device.cc",
    "linux/alsa_audio_device.h",
    "linux/alsa_audio_record.cc",
    "linux/alsa_audio_record.h",
    "linux/alsa_audio_track.cc",
    "linux/alsa_audio_track.h",
  ]
  deps = [
    ":audio_device_base",
    ":linux_alsa_symbol",
    "//base:logging",
  ]
}

# executable
ave_executable("yplay") {
  testonly = true
  sources = [ "play_audio.cc" ]
  deps = [ ":audio_device" ]
}
